use serde::{Deserialize, Serialize};
use sqlx::{mysql::MySqlPool, FromRow, Error};

#[derive(Debug, Serialize, Deserialize, FromRow)]
pub struct TypeExploitation {
    pub id: i32,                  // Non nullable
    pub nom_type_exploitation: String, // Nom du type d'exploitation
}

impl TypeExploitation {
    // Ajouter un type d'exploitation
    pub async fn create(pool: &MySqlPool, nom_type_exploitation: String) -> Result<Self, Error> {
        let insert_result = sqlx::query!(
            r#"
            INSERT INTO types_exploitation (nom_type_exploitation)
            VALUES (?)
            "#,
            nom_type_exploitation
        )
        .execute(pool)
        .await?;

        // Récupérer l'ID de l'exploitation insérée
        let last_id = insert_result.last_insert_id() as i32;

        Ok(TypeExploitation {
            id: last_id,
            nom_type_exploitation,
        })
    }

    // Récupérer tous les types d'exploitation
    pub async fn get_all(pool: &MySqlPool) -> Result<Vec<Self>, Error> {
        let types_exploitation = sqlx::query_as!(
            TypeExploitation,
            r#"
            SELECT id, nom_type_exploitation
            FROM types_exploitation
            "#
        )
        .fetch_all(pool)
        .await?;

        Ok(types_exploitation)
    }
}
